<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Programming on Andrew Moores Blog</title>
    <link>https://example.org/tags/programming/</link>
    <description>Recent content in Programming on Andrew Moores Blog</description>
    <generator>Hugo</generator>
    <language>en-uk</language>
    <lastBuildDate>Mon, 17 Jun 2024 10:30:00 +0000</lastBuildDate>
    <atom:link href="https://example.org/tags/programming/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>JavaScript Async/Await: Making Asynchronous Code Readable</title>
      <link>https://example.org/posts/javascript-async-await/</link>
      <pubDate>Mon, 17 Jun 2024 10:30:00 +0000</pubDate>
      <guid>https://example.org/posts/javascript-async-await/</guid>
      <description>&lt;p&gt;Asynchronous programming in JavaScript can be challenging, but async/await syntax makes it much more readable and easier to understand. Let&amp;rsquo;s explore how to use these powerful features effectively.&lt;/p&gt;&#xA;&lt;h2 id=&#34;before-asyncawait-callback-hell&#34;&gt;Before Async/Await: Callback Hell&lt;/h2&gt;&#xA;&lt;p&gt;Traditional callback-based code could become deeply nested and hard to follow:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getData&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;getMoreData&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;getEvenMoreData&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#75715e&#34;&gt;// Finally do something with c&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        });&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    });&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;});&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;enter-asyncawait&#34;&gt;Enter Async/Await&lt;/h2&gt;&#xA;&lt;p&gt;Async/await allows you to write asynchronous code that looks and feels synchronous:&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
